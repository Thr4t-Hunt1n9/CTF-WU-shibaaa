from Crypto.Util.number import isPrime, long_to_bytes, GCD
from math import isqrt
from functools import reduce

# Thông tin từ đề bài
#n = 8242620732262909867878113281012018732278863945420526557791199254408257645474897397593577196677011122595919740541591920781506102495280619868063408571075243
n=4076685123542601106472765242196448515789294637247785748023409465176986734347356982359593870463296999669819850994259611598657244700566751205454495533863997
#c = 20530188269857033227552501374512492063210340036515162066082507507361374259664195970635336752542990474419048162794543137690229029552303482501325914475518269059105250902383881689172038649928553356614692672188510858274714501424154824636569505416997036242381758585152998128009272173679378880154204715815820964451

c=9343237566217596366274811599728117403500929690265545992234431237114719776126824375328643373777716268629855236025099486176049276168637025262891374873620097034149025089960658687515282328150206659313677642647250797508722517371978754042226733662448907091886176399425588152801207692207854897856811399856822388886
# ---------------------------
# Fermat's Factorization
# ---------------------------
def is_square(n):
    if n < 0:
        return False
    root = isqrt(n)
    return root * root == n

def fermat_factor(n):
    print("[*] Starting Fermat factorization...")
    a = isqrt(n)
    if a * a < n:
        a += 1
    b2 = a*a - n
    while not is_square(b2):
        a += 1
        b2 = a*a - n
    b = isqrt(b2)
    p = a - b
    q = a + b
    assert p * q == n
    print(f"[+] Found p = {p}")
    print(f"[+] Found q = {q}")
    return p, q

# ---------------------------
# Paillier Decryption
# ---------------------------
def L(u, n):
    return (u - 1) // n

def lcm(a, b):
    return abs(a*b) // GCD(a, b)

def decrypt(c, p, q):
    n = p * q
    nsq = n * n
    g = n + 1
    λ = lcm(p - 1, q - 1)
    u = pow(c, λ, nsq)
    l = L(u, n)
    # Compute mu = L(g^λ mod n^2)^(-1) mod n
    mu = pow(L(pow(g, λ, nsq), n), -1, n)
    m = (l * mu) % n
    return m

# ---------------------------
# Main
# ---------------------------
p, q = fermat_factor(n)
m = decrypt(c, p, q)
flag = long_to_bytes(m)
print(f"[+] Flag: {flag.decode(errors='ignore')}")
